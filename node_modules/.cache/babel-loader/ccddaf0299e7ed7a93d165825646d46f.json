{"ast":null,"code":"import _regeneratorRuntime from \"/home/arber/Desktop/Blockchain/block-swap1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/arber/Desktop/Blockchain/block-swap1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/arber/Desktop/Blockchain/block-swap1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/arber/Desktop/Blockchain/block-swap1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/arber/Desktop/Blockchain/block-swap1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/arber/Desktop/Blockchain/block-swap1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/arber/Desktop/Blockchain/block-swap1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/arber/Desktop/Blockchain/block-swap1/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport Token from \"../abis/Token.json\";\nimport BlockSwap from \"../abis/BlockSwap.json\";\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\nimport \"./App.css\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, ethBalance, networkId, tokenData, token, tokenBalance, blockSwapData, blockSwap;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 7;\n                return web3.eth.getBalance(this.state.account);\n\n              case 7:\n                ethBalance = _context2.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                }); // Load Token\n\n                _context2.next = 11;\n                return web3.eth.net.getId();\n\n              case 11:\n                networkId = _context2.sent;\n                tokenData = Token.networks[networkId];\n\n                if (!tokenData) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                token = new web3.eth.Contract(Token.abi, tokenData.address);\n                this.setState({\n                  token: token\n                });\n                _context2.next = 18;\n                return token.methods.balanceOf(this.state.account).call();\n\n              case 18:\n                tokenBalance = _context2.sent;\n                console.log('tokenBalance', tokenBalance);\n                this.setState({\n                  tokenBalance: tokenBalance.toString()\n                });\n                _context2.next = 24;\n                break;\n\n              case 23:\n                window.alert(\"Token contract not deployed to detected network.\");\n\n              case 24:\n                // Load BlockSwap\n                blockSwapData = BlockSwap.networks[networkId];\n\n                if (blockSwapData) {\n                  blockSwap = new web3.eth.Contract(BlockSwap.abi, blockSwapData.address);\n                  this.setState({\n                    blockSwap: blockSwap\n                  });\n                } else {\n                  window.alert(\"BlockSwap contract not deployed to detected network.\");\n                }\n\n                this.setState({\n                  loading: false\n                });\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.buyTokens = function (etherAmount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.blockSwap.methods.buyTokens().send({\n        value: etherAmount,\n        from: _this.state.account\n      }).on(\"transactionHash\", function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.sellTokens = function (tokenAmount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.token.methods.approve(_this.state.blockSwap.address, tokenAmount).send({\n        from: _this.state.account\n      }).on(\"transactionHash\", function (hash) {\n        _this.state.blockSwap.methods.sellTokens(tokenAmount).send({\n          from: _this.state.account\n        }).on(\"transactionHash\", function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: \"\",\n      token: {},\n      blockSwap: {},\n      ethBalance: \"0\",\n      tokenBalance: \"0\",\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.loading) {\n        content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 9\n          }\n        }, \"Loading...\");\n      } else {\n        content = /*#__PURE__*/React.createElement(Main, {\n          ethBalance: this.state.ethBalance,\n          tokenBalance: this.state.tokenBalance,\n          buyTokens: this.buyTokens,\n          sellTokens: this.sellTokens,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 9\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: \"600px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/arber/Desktop/Blockchain/block-swap1/src/components/App.js"],"names":["React","Component","Web3","Token","BlockSwap","Navbar","Main","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","net","getId","networkId","tokenData","networks","token","Contract","abi","address","methods","balanceOf","call","tokenBalance","console","log","toString","alert","blockSwapData","blockSwap","loading","ethereum","enable","currentProvider","props","buyTokens","etherAmount","send","value","from","on","hash","sellTokens","tokenAmount","approve","content","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport Token from \"../abis/Token.json\";\nimport BlockSwap from \"../abis/BlockSwap.json\";\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\nimport \"./App.css\";\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    const ethBalance = await web3.eth.getBalance(this.state.account);\n    this.setState({ ethBalance });\n\n    // Load Token\n    const networkId = await web3.eth.net.getId();\n    const tokenData = Token.networks[networkId];\n    if (tokenData) {\n      const token = new web3.eth.Contract(Token.abi, tokenData.address);\n      this.setState({ token });\n      let tokenBalance = await token.methods\n        .balanceOf(this.state.account)\n        .call();\n      console.log('tokenBalance',tokenBalance);\n      this.setState({ tokenBalance: tokenBalance.toString() });\n    } else {\n      window.alert(\"Token contract not deployed to detected network.\");\n    }\n\n    // Load BlockSwap\n    const blockSwapData = BlockSwap.networks[networkId];\n    if (blockSwapData) {\n      const blockSwap = new web3.eth.Contract(\n        BlockSwap.abi,\n        blockSwapData.address\n      );\n      this.setState({ blockSwap });\n    } else {\n      window.alert(\"BlockSwap contract not deployed to detected network.\");\n    }\n\n    this.setState({ loading: false });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  buyTokens = (etherAmount) => {\n    this.setState({ loading: true });\n    this.state.blockSwap.methods\n      .buyTokens()\n      .send({ value: etherAmount, from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.setState({ loading: false });\n      });\n  };\n\n  sellTokens = (tokenAmount) => {\n    this.setState({ loading: true });\n    this.state.token.methods\n      .approve(this.state.blockSwap.address, tokenAmount)\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.state.blockSwap.methods\n          .sellTokens(tokenAmount)\n          .send({ from: this.state.account })\n          .on(\"transactionHash\", (hash) => {\n            this.setState({ loading: false });\n          });\n      });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      token: {},\n      blockSwap: {},\n      ethBalance: \"0\",\n      tokenBalance: \"0\",\n      loading: true,\n    };\n  }\n\n  render() {\n    let content;\n    if (this.state.loading) {\n      content = (\n        <p id=\"loader\" className=\"text-center\">\n          Loading...\n        </p>\n      );\n    } else {\n      content = (\n        <Main\n          ethBalance={this.state.ethBalance}\n          tokenBalance={this.state.tokenBalance}\n          buyTokens={this.buyTokens}\n          sellTokens={this.sellTokens}\n        />\n      );\n    }\n\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main\n              role=\"main\"\n              className=\"col-lg-12 ml-auto mr-auto\"\n              style={{ maxWidth: \"600px\" }}\n            >\n              <div className=\"content mr-auto ml-auto\">\n                {content}\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}