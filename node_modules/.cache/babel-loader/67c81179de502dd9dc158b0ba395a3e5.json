{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\n\nvar SimpleInnerSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SimpleInnerSubscriber, _super);\n\n  function SimpleInnerSubscriber(parent) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    return _this;\n  }\n\n  SimpleInnerSubscriber.prototype._next = function (value) {\n    this.parent.notifyNext(value);\n  };\n\n  SimpleInnerSubscriber.prototype._error = function (error) {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  };\n\n  SimpleInnerSubscriber.prototype._complete = function () {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  };\n\n  return SimpleInnerSubscriber;\n}(Subscriber);\n\nexport { SimpleInnerSubscriber };\n\nvar ComplexInnerSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ComplexInnerSubscriber, _super);\n\n  function ComplexInnerSubscriber(parent, outerValue, outerIndex) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    _this.outerValue = outerValue;\n    _this.outerIndex = outerIndex;\n    return _this;\n  }\n\n  ComplexInnerSubscriber.prototype._next = function (value) {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n  };\n\n  ComplexInnerSubscriber.prototype._error = function (error) {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  };\n\n  ComplexInnerSubscriber.prototype._complete = function () {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  };\n\n  return ComplexInnerSubscriber;\n}(Subscriber);\n\nexport { ComplexInnerSubscriber };\n\nvar SimpleOuterSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SimpleOuterSubscriber, _super);\n\n  function SimpleOuterSubscriber() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  SimpleOuterSubscriber.prototype.notifyError = function (err) {\n    this.destination.error(err);\n  };\n\n  SimpleOuterSubscriber.prototype.notifyComplete = function () {\n    this.destination.complete();\n  };\n\n  return SimpleOuterSubscriber;\n}(Subscriber);\n\nexport { SimpleOuterSubscriber };\n\nvar ComplexOuterSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ComplexOuterSubscriber, _super);\n\n  function ComplexOuterSubscriber() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ComplexOuterSubscriber.prototype.notifyNext = function (_outerValue, innerValue, _outerIndex, _innerSub) {\n    this.destination.next(innerValue);\n  };\n\n  ComplexOuterSubscriber.prototype.notifyError = function (error) {\n    this.destination.error(error);\n  };\n\n  ComplexOuterSubscriber.prototype.notifyComplete = function (_innerSub) {\n    this.destination.complete();\n  };\n\n  return ComplexOuterSubscriber;\n}(Subscriber);\n\nexport { ComplexOuterSubscriber };\nexport function innerSubscribe(result, innerSubscriber) {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n\n  var subscription;\n\n  try {\n    subscription = subscribeTo(result)(innerSubscriber);\n  } catch (error) {\n    innerSubscriber.error(error);\n  }\n\n  return subscription;\n}","map":null,"metadata":{},"sourceType":"module"}